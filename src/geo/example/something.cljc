;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package geo.example.something
;;;----------------------------------------------------------------------------------
(ns geo.example.something
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [sf.substreams.rpc.v2 :as sf.substreams.rpc.v2]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->Foo)
(declare ecis->Foo)
(declare new-Foo)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Foo
;-----------------------------------------------------------------------------
(defrecord Foo-record [bar]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:bar this) os))
  pb/TypeReflection
  (gettype [this]
    "geo.example.something.Foo"))

(s/def :geo.example.something.Foo/bar string?)
(s/def ::Foo-spec (s/keys :opt-un [:geo.example.something.Foo/bar ]))
(def Foo-defaults {:bar "" })

(defn cis->Foo
  "CodedInputStream to Foo"
  [is]
  (->> (tag-map Foo-defaults
         (fn [tag index]
             (case index
               1 [:bar (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Foo-record)))

(defn ecis->Foo
  "Embedded CodedInputStream to Foo"
  [is]
  (serdes.core/cis->embedded cis->Foo is))

(defn new-Foo
  "Creates a new instance from a map, similar to map->Foo except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Foo-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Foo-spec init))))]}
  (-> (merge Foo-defaults init)
      (map->Foo-record)))

(defn pb->Foo
  "Protobuf to Foo"
  [input]
  (cis->Foo (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Foo-meta {:type "geo.example.something.Foo" :decoder pb->Foo})

