;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package geo.clojure.sink
;;;----------------------------------------------------------------------------------
(ns geo.clojure.sink
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [sf.substreams.v1 :as sf.substreams.v1]
            [sf.substreams.rpc.v2 :as sf.substreams.rpc.v2]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->EntryAdded)
(declare ecis->EntryAdded)
(declare new-EntryAdded)
(declare cis->EntriesAdded)
(declare ecis->EntriesAdded)
(declare new-EntriesAdded)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; EntryAdded
;-----------------------------------------------------------------------------
(defrecord EntryAdded-record [id index uri author space]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:id this) os)
    (serdes.core/write-String 2  {:optimize true} (:index this) os)
    (serdes.core/write-String 3  {:optimize true} (:uri this) os)
    (serdes.core/write-String 4  {:optimize true} (:author this) os)
    (serdes.core/write-String 5  {:optimize true} (:space this) os))
  pb/TypeReflection
  (gettype [this]
    "geo.clojure.sink.EntryAdded"))

(s/def :geo.clojure.sink.EntryAdded/id string?)
(s/def :geo.clojure.sink.EntryAdded/index string?)
(s/def :geo.clojure.sink.EntryAdded/uri string?)
(s/def :geo.clojure.sink.EntryAdded/author string?)
(s/def :geo.clojure.sink.EntryAdded/space string?)
(s/def ::EntryAdded-spec (s/keys :opt-un [:geo.clojure.sink.EntryAdded/id :geo.clojure.sink.EntryAdded/index :geo.clojure.sink.EntryAdded/uri :geo.clojure.sink.EntryAdded/author :geo.clojure.sink.EntryAdded/space ]))
(def EntryAdded-defaults {:id "" :index "" :uri "" :author "" :space "" })

(defn cis->EntryAdded
  "CodedInputStream to EntryAdded"
  [is]
  (->> (tag-map EntryAdded-defaults
         (fn [tag index]
             (case index
               1 [:id (serdes.core/cis->String is)]
               2 [:index (serdes.core/cis->String is)]
               3 [:uri (serdes.core/cis->String is)]
               4 [:author (serdes.core/cis->String is)]
               5 [:space (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EntryAdded-record)))

(defn ecis->EntryAdded
  "Embedded CodedInputStream to EntryAdded"
  [is]
  (serdes.core/cis->embedded cis->EntryAdded is))

(defn new-EntryAdded
  "Creates a new instance from a map, similar to map->EntryAdded except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EntryAdded-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EntryAdded-spec init))))]}
  (-> (merge EntryAdded-defaults init)
      (map->EntryAdded-record)))

(defn pb->EntryAdded
  "Protobuf to EntryAdded"
  [input]
  (cis->EntryAdded (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EntryAdded-meta {:type "geo.clojure.sink.EntryAdded" :decoder pb->EntryAdded})

;-----------------------------------------------------------------------------
; EntriesAdded
;-----------------------------------------------------------------------------
(defrecord EntriesAdded-record [entries]
  pb/Writer
  (serialize [this os]
    (serdes.complex/write-repeated serdes.core/write-embedded 1 (:entries this) os))
  pb/TypeReflection
  (gettype [this]
    "geo.clojure.sink.EntriesAdded"))

(s/def ::EntriesAdded-spec (s/keys :opt-un []))
(def EntriesAdded-defaults {:entries [] })

(defn cis->EntriesAdded
  "CodedInputStream to EntriesAdded"
  [is]
  (->> (tag-map EntriesAdded-defaults
         (fn [tag index]
             (case index
               1 [:entries (serdes.complex/cis->repeated ecis->EntryAdded is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->EntriesAdded-record)))

(defn ecis->EntriesAdded
  "Embedded CodedInputStream to EntriesAdded"
  [is]
  (serdes.core/cis->embedded cis->EntriesAdded is))

(defn new-EntriesAdded
  "Creates a new instance from a map, similar to map->EntriesAdded except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::EntriesAdded-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::EntriesAdded-spec init))))]}
  (-> (merge EntriesAdded-defaults init)
      (cond-> (some? (get init :entries)) (update :entries #(map new-EntryAdded %)))
      (map->EntriesAdded-record)))

(defn pb->EntriesAdded
  "Protobuf to EntriesAdded"
  [input]
  (cis->EntriesAdded (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record EntriesAdded-meta {:type "geo.clojure.sink.EntriesAdded" :decoder pb->EntriesAdded})

